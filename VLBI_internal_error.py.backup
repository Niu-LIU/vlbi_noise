#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File name: VLBI_internal_error.py
"""
Created on Thu May 17 11:31:14 2018

@author: Neo(liuniu@smail.nju.edu.cn)


This code is used to determine the scaling factor and noise floor of the
VLBI formal error.
"""

import numpy as np
from numpy import cos, deg2rad, sqrt
from scipy.optimize import curve_fit

from nor_sep import pos_max_calc, overall_err_calc
from list_crossmatch import list_crossmatch
from error_plot import error_vs_numses, error_vs_numses2, \
    error_vs_numobs, error_vs_numobs2, maxerror_vs_numses, \
    maxerror_vs_numobs, maxerror_vs_numses2, maxerror_vs_numobs2, \
    overallerror_vs_numses, overallerror_vs_numobs, \
    overallerror_vs_numses2, overallerror_vs_numobs2, \
    comparison_plot, comparison_plot2, comparison_plot3, \
    comparison_plot3_1, difference_vs_error_plot


# -----------------------------  FUNCTIONS -----------------------------
# def error_inflation(dx_err_2, s, f):
def error_inflation(dx_err, s, f):
    """dx^2 ~ (s * dx_err)^2 + f^2

    Parameters
    ----------
    # dx_err : array_like of float type
    #     combined formal error
    dx_err_2 : array_like of float type
        square of combined formal error
    s : float
        scaling fator
    f : float
        noise floor

    Returns
    ----------
    square of positional offset
    """

    return (s * dx_err)**2 + f**2
    # return s**2 * dx_err_2 + f**2


def error_inflation2(dx_err, s, f):
    """dx_wrms^2 ~ (s * dx_err)^2 + f^2

    Parameters
    ----------
    dx_err : array_like of float type
        combined formal error
    s : float
        scaling fator
    f : float
        noise floor

    Returns
    ----------
    dx_wrms : scatter of positonal offset
    """

    return sqrt((s * dx_err)**2 + f**2)


def wrms_calc(x, x_err):
    """Calculate the wrms of a set of data.

    Parameters
    ----------
    x : array_like of float
        data
    x_err : array_like of float
        formal error of x

    Returns
    ----------
    wrms : float
        wrms
    """

    # return np.dot(x/x_err, x/x_err) / np.dot(1./x_err, 1./x_err)
    return sqrt(np.sum(x**2/x_err**2) / np.sum(1./x_err**2))


def pos_offset_wrms_calc(x, x_err, interv=0.04, max_err=1):
    """Calculate the scatter of positional offset

    Parameters
    ----------
    x : array_like of float
        data
    x_err : array_like of float
        formal error of x
    interv : float
        width of interval in mas
    max_err : float
        maximum of x_err in mas

    Returns
    ----------
    x_wrms : float of array
        wrms of x binned by interval of x_err
    err_mid : float of array
        mid-point of interval of x_err
    """

    # interv = 40  # uas
    # max_err = 1000  # uas
    num_interv = int(max_err / interv)
    x_wrms = np.zeros(num_interv)
    err_mid = np.ones(num_interv)

    for i in range(num_interv):
        interv_b = 0.001 + i * interv
        interv_e = interv_b + interv
        con = (x_err > interv_b) & (x_err <= interv_e)
        xs = x[con]
        x_errs = x_err[con]

        x_wrms[i] = wrms_calc(xs, x_errs)
        err_mid[i] = (interv_b + interv_e) / 2.

    return x_wrms, err_mid


def pos_offset_wrms_calc2(num_ses_sort, x, x_err, interv_size=50):
    """Calculate the scatter of positional offset

    Parameters
    ----------
    num_ses_sort : array_like of int
        number of sessions a source was observed
    x : array_like of float
        data
    x_err : array_like of float
        formal error of x
    interv_size : int
        number of source in an interval

    Returns
    ----------
    x_wrms : array of float
        wrms of x binned by interval of x_err
    err_med : array of float
        mdedian of x_err in every interval
    ses_min : array of int
        minimum number of session in the subset
    """

    interv_num0 = x.size // interv_size
    if x.size % interv_size:
        interv_num = interv_num0 + 1
    else:
        interv_num = interv_num0

    x_wrms = np.zeros(interv_num)
    err_med = np.ones(interv_num)
    ses_min = np.ones(interv_num)

    for i in range(interv_num0):
        ind_b, ind_e = i * interv_size, (i+1) * interv_size
        num_ses_sorts = num_ses_sort[ind_b: ind_e]
        xs = x[ind_b: ind_e]
        x_errs = x_err[ind_b: ind_e]

        x_wrms[i] = wrms_calc(xs, x_errs)
        err_med[i] = np.median(x_errs)
        ses_min[i] = min(num_ses_sorts)

    if x.size % interv_size:
        x_wrms[-1] = wrms_calc(x[ind_e:], x_err[ind_e:])
        err_med[-1] = np.median(x_err[ind_e:])
        ses_min[-1] = min(num_ses_sort[ind_e:])

    return x_wrms, err_med, ses_min


def pos_offset_wrms_calc3(num_ses_sort, x, x_err, interv_size=50):
    """Calculate the scatter of positional offset

    Parameters
    ----------
    num_ses_sort : array_like of int
        number of sessions a source was observed
    x : array_like of float
        data
    x_err : array_like of float
        formal error of x
    interv_size : int
        number of source in an interval

    Returns
    ----------
    x_wrms : array of float
        wrms of x binned by interval of x_err
    err_med : array of float
        mdedian of x_err in every interval
    ses_min : array of int
        minimum number of session in the subset
    """

    if x.size <= interv_size:
        print("# Too smaller sample!")
        exit()
    else:
        interv_num = x.size - interv_size + 1

    x_wrms = np.zeros(interv_num)
    err_med = np.ones(interv_num)
    ses_min = np.ones(interv_num)

    for i in range(interv_num):
        ind_b, ind_e = i, i + 50
        num_ses_sorts = num_ses_sort[ind_b: ind_e]
        xs = x[ind_b: ind_e]
        x_errs = x_err[ind_b: ind_e]

        x_wrms[i] = wrms_calc(xs, x_errs)
        err_med[i] = np.median(x_errs)
        ses_min[i] = min(num_ses_sorts)

    return x_wrms, err_med, ses_min


# --------------------------------- MAIN -------------------------------
# Load data
# odd sessions
dat_dir1 = ("/Users/Neo/Astronomy/Data/VLBISolutions/vlbi2_server/GaiaCRF/"
            "opa2018b-ga15-odd")

cat1 = "%s/opa2018b-ga15-odd.cat" % dat_dir1
sou1 = np.genfromtxt(cat1, dtype=str, usecols=(0,))
RA1, Dec1, RAc_err1, Dec_err1, corr1 = np.genfromtxt(
    cat1, usecols=range(2, 7), unpack=True)
# print(RA, Dec, RAc_err, Dec_err, corr)
num_ses1, num_obs1 = np.genfromtxt(cat1, usecols=range(10, 12),
                                   dtype=int, unpack=True)

# print("range of N_session: [%d, %d]" % (min(num_ses1), max(num_ses1)))
# print("range of N_observation: [%d, %d]" % (min(num_obs1), max(num_obs1)))


# ellipe semi-major axis
sig_pos_max1 = pos_max_calc(RAc_err1, Dec_err1, corr1)

# overall formal uncertainty
overall_err1 = overall_err_calc(RAc_err1, Dec_err1, corr1)


# mas -> uas
# RAc_err1 = RAc_err1 * 1.e3
# Dec_err1 = Dec_err1 * 1.e3

# error_vs_numses(RAc_err1, Dec_err1, num_ses1,
#                 "%s/plots/ga15-odd-err-Nses.eps" % dat_dir1)
# #                 "%s/plots/ga15-odd-err-Nses.png" % dat_dir1)
# error_vs_numobs(RAc_err1, Dec_err1, num_obs1,
#                 "%s/plots/ga15-odd-err-Nobs.eps" % dat_dir1)
# #                 "%s/plots/ga15-odd-err-Nobs.png" % dat_dir1)

# maxerror_vs_numses(sig_pos_max1, num_ses1,
#                    "%s/plots/ga15-odd-maxerr-Nses.eps" % dat_dir1)
# maxerror_vs_numobs(sig_pos_max1, num_obs1,
#                    "%s/plots/ga15-odd-maxerr-Nobs.eps" % dat_dir1)

# overallerror_vs_numses(overall_err1, num_ses1,
#                        "%s/plots/ga15-odd-overallerr-Nses.eps" % dat_dir1)
# overallerror_vs_numobs(overall_err1, num_obs1,
#                        "%s/plots/ga15-odd-overallerr-Nobs.eps" % dat_dir1)


# even sessions
dat_dir2 = ("/Users/Neo/Astronomy/Data/VLBISolutions/vlbi2_server/GaiaCRF/"
            "opa2018b-ga15-even")

cat2 = "%s/opa2018b-ga15-even.cat" % dat_dir2
sou2 = np.genfromtxt(cat2, dtype=str, usecols=(0,))
RA2, Dec2, RAc_err2, Dec_err2, corr2 = np.genfromtxt(
    cat2, usecols=range(2, 7), unpack=True)
# print(RA, Dec, RAc_err, Dec_err, corr)
num_ses2, num_obs2 = np.genfromtxt(cat2, usecols=range(10, 12),
                                   dtype=int, unpack=True)

# print("range of N_session: [%d, %d]" % (min(num_ses2), max(num_ses2)))
# print("range of N_observation: [%d, %d]" % (min(num_obs2), max(num_obs2)))


# ellipe semi-major axis
sig_pos_max2 = pos_max_calc(RAc_err2, Dec_err2, corr2)

# overall formal uncertainty
overall_err2 = overall_err_calc(RAc_err2, Dec_err2, corr2)

# mas -> uas
# RAc_err2 = RAc_err2 * 1.e3
# Dec_err2 = Dec_err2 * 1.e3

# error_vs_numses(RAc_err2, Dec_err2, num_ses2,
#                 "%s/plots/ga15-even-err-Nses.eps" % dat_dir2)
# #                 # "%s/plots/ga15-even-err-Nses.png" % dat_dir2)
# error_vs_numobs(RAc_err2, Dec_err2, num_obs2,
#                 "%s/plots/ga15-even-err-Nobs.eps" % dat_dir2)
# #                 # "%s/plots/ga15-even-err-Nobs.png" % dat_dir2)

# maxerror_vs_numses(sig_pos_max2, num_ses2,
#                    "%s/plots/ga15-even-maxerr-Nobs.eps" % dat_dir2)
# maxerror_vs_numobs(sig_pos_max2, num_obs2,
#                    "%s/plots/ga15-even-maxerr-Nses.eps" % dat_dir2)

# overallerror_vs_numses(overall_err2, num_ses2,
#                        "%s/plots/ga15-even-overallerr-Nses.eps" % dat_dir2)
# overallerror_vs_numobs(overall_err2, num_obs2,
#                        "%s/plots/ga15-even-overallerr-Nobs.eps" % dat_dir2)


# Both
# error_vs_numses2(RAc_err1, Dec_err1, num_ses1,
#                  RAc_err2, Dec_err2, num_ses2,
#                  "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                  "ga15-odd-even-err-Nses.eps")
# # "ga15-odd-even-err-Nses.png")
# error_vs_numobs2(RAc_err1, Dec_err1, num_obs1,
#                  RAc_err2, Dec_err2, num_obs2,
#                  "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                  "ga15-odd-even-err-Nobs.eps")
# # "ga15-odd-even-err-Nobs.png")

# maxerror_vs_numses2(sig_pos_max1, num_ses1,
#                     sig_pos_max2, num_ses2,
#                     "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                     "ga15-odd-even-maxerr-Nses.eps")
# # "ga15-odd-even-err-Nses.png")
# maxerror_vs_numobs2(sig_pos_max1, num_obs1,
#                     sig_pos_max2, num_obs2,
#                     "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                     "ga15-odd-even-maxerr-Nobs.eps")
# # "ga15-odd-even-err-Nobs.png")

# overallerror_vs_numses2(overall_err1, num_ses1,
#                         overall_err2, num_ses2,
#                         "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                         "ga15-odd-even-overallerr-Nses.eps")
# # "ga15-odd-even-err-Nses.png")
# overallerror_vs_numobs2(overall_err1, num_obs1,
#                         overall_err2, num_obs2,
#                         "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                         "ga15-odd-even-overallerr-Nobs.eps")
# # "ga15-odd-even-err-Nobs.png")


# Cross-match between between two solutions
comsou, ind1, ind2 = list_crossmatch(sou1, sou2)


# Verify the result of cross-match
# soucom1 = np.take(sou1, ind1)
# soucom2 = np.take(sou2, ind2)
# for i, (comsoui, soucom1i, soucom2i) in enumerate(
#         zip(comsou, soucom1, soucom2)):

#     if comsoui != soucom1i:
#         print("%dth source %s are not consistented in list1 %s." %
#               (i, comsoui, soucom1i))

#     if comsoui != soucom2i:
#         print("%dth source %s are not consistented in list2 %s." %
#               (i, comsoui, soucom2i))


# Extract data
# odd sessions
RA_com1 = np.take(RA1, ind1)
Dec_com1 = np.take(Dec1, ind1)
RAc_err_com1 = np.take(RAc_err1, ind1)
Dec_err_com1 = np.take(Dec_err1, ind1)
num_ses_com1 = np.take(num_ses1, ind1)
num_obs_com1 = np.take(num_obs1, ind1)
sig_pos_max_com1 = np.take(sig_pos_max1, ind1)

# even sessions
RA_com2 = np.take(RA2, ind2)
Dec_com2 = np.take(Dec2, ind2)
RAc_err_com2 = np.take(RAc_err2, ind2)
Dec_err_com2 = np.take(Dec_err2, ind2)
num_ses_com2 = np.take(num_ses2, ind2)
num_obs_com2 = np.take(num_obs2, ind2)
sig_pos_max_com2 = np.take(sig_pos_max2, ind2)


# # Plot for error comparsion
# comparison_plot(RAc_err_com1, RAc_err_com2,
#                 "$\\sigma_{\\alpha^*}$ (mas) - odd",
#                 "$\\sigma_{\\alpha^*}$ (mas) - even",
#                 "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                 "ga15-odd-even-com-RAcerr.eps")
# comparison_plot(Dec_err_com1, Dec_err_com2,
#                 "$\\sigma_\\delta$ (mas) - odd",
#                 "$\\sigma_\\delta$ (mas) - even",
#                 "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                 "ga15-odd-even-com-Decerr.eps")
# comparison_plot(num_ses_com1, num_ses_com2,
#                 "$N_{session}$ - odd",
#                 "$N_{session}$ - even",
#                 "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                 "ga15-odd-even-com-Numses.eps")
# comparison_plot(num_obs_com1, num_obs_com2,
#                 "$N_{observation}$ - odd",
#                 "$N_{observation}$ - even",
#                 "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                 "ga15-odd-even-com-Numobs.eps")
# comparison_plot(sig_pos_max_com1, sig_pos_max_com2,
#                 "Elliptical error (mas) - odd",
#                 "Elliptical error (mas) - even",
#                 "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                 "ga15-odd-even-com-maxerr.eps")


# Calculate the differences (even - odd)
# deg -> mas
dRAc = (RA_com2 - RA_com1) * cos(deg2rad(Dec_com2)) * 3.6e6
dDec = (Dec_com2 - Dec_com1) * 3.6e6
dRAc_err_2 = RAc_err_com1**2 + RAc_err_com2**2
dRAc_err = sqrt(dRAc_err_2)
dDec_err_2 = Dec_err_com1**2 + Dec_err_com2**2
dDec_err = sqrt(dDec_err_2)
num_ses_mean = (num_ses_com1 + num_ses_com2) / 2.
num_obs_mean = (num_obs_com1 + num_obs_com2) / 2.


# print the result.


# # Plot for differences vs error
# difference_vs_error_plot(dRAc_err_2, dRAc**2,
#                          "$\\sigma_{\\Delta\\alpha^*}^2 (mas^2)$",
#                          "$\\Delta^2_{\\alpha^*} (mas^2)$",
#                          "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                          "ga15-odd-even-dRAc-dRAcerr.eps")
# difference_vs_error_plot(dDec_err_2, dDec**2,
#                          "$\\sigma_{\\Delta\\delta}^2 (mas^2)$",
#                          "$\\Delta^2_{\\delta} (mas^2)$",
#                          "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                          "ga15-odd-even-dDec-dDecerr.eps")
# difference_vs_error_plot(dRAc_err_2, dRAc,
#                          "$\\sigma_{\\Delta\\alpha^*}^2 (mas^2)$",
#                          "$\\Delta^2_{\\alpha^*} (mas^2)$",
#                          "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                          "ga15-odd-even-dRAc-dRAcerr.eps")
# difference_vs_error_plot(dDec_err_2, dDec**2,
#                          "$\\sigma_{\\Delta\\delta}^2 (mas^2)$",
#                          "$\\Delta^2_{\\delta} (mas^2)$",
#                          "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                          "ga15-odd-even-dDec-dDecerr.eps")


# estimation of scaling factor and noise floor


# # Method #01)
# init_vals = [1.0, 0.04]

# For R.A. component
# best_vals_RA, covar_RA = curve_fit(
#     error_inflation, dRAc_err_2, dRAc**2, p0=init_vals)
# sf_RA, nf_RA = best_vals_RA
# sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# print("For R.A. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_RA, sf_RA_err, nf_RA, nf_RA_err))


# # use a limit of err < 1 mas
# # con = dRAc_err_2 <= 1
# con = (dRAc_err_2 <= 1) & (dRAc_err_2 >= 1.e-6)
# # con = (dRAc_err_2 <= 1) & (dRAc_err_2 >= 1.e-4) & (dRAc <= 1)
# dRAc_err_2_s = dRAc_err_2[con]
# dRAc_s = dRAc[con]
# best_vals_RA, covar_RA = curve_fit(
#     error_inflation, dRAc_err_2_s, dRAc_s**2, p0=init_vals)
# sf_RA, nf_RA = best_vals_RA
# sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# print("For R.A. component (0.001 mas <= err <= 1 mas):\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_RA, sf_RA_err, nf_RA, nf_RA_err))


# For Dec. component
# best_vals_Dec, covar_Dec = curve_fit(
#     error_inflation, dDec_err_2, dDec**2, p0=init_vals)
# sf_Dec, nf_Dec = best_vals_Dec
# sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# print("For Dec. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err))


# # use a limit of 0.001 mas <= err <= 1 mas
# con = (dDec_err_2 <= 1) & (dDec_err_2 >= 1.e-6)
# # con = (dDec_err_2 <= 1) & (dDec_err_2 >= 1.e-4) & (dDec <= 1)
# dDec_err_2_s = dDec_err_2[con]
# dDec_s = dDec[con]
# best_vals_Dec, covar_Dec = curve_fit(
#     error_inflation, dDec_err_2_s, dDec_s**2, p0=init_vals)
# sf_Dec, nf_Dec = best_vals_Dec
# sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# print("For Dec. component (0.001 mas <= dDec_err <= 1 mas):\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err))


# # Method #02) Lambert AA 2014
# # Calculate the positional offset scatter
# dRAc_wrms, dRAc_err_mid = pos_offset_wrms_calc(dRAc, dRAc_err,
#                                                interv=0.04, max_err=1)
# dDec_wrms, dDec_err_mid = pos_offset_wrms_calc(dDec, dDec_err,
#                                                interv=0.04, max_err=1)

# # Plot
# comparison_plot2(dRAc_err_mid, dRAc_wrms, dDec_err_mid, dDec_wrms,
#                  "Formal error in $\\alpha\\,\\cos\\delta$ (mas)",
#                  # "Scatter of the offset in $\\alpha\\,\\cos\\delta$ (mas)",
#                  "Scatter in $\\alpha\\,\\cos\\delta$ (mas)",
#                  "Formal error in $\\delta$ (mas)",
#                  # "Scatter of the offset in $\\delta$ (mas)",
#                  "Scatter in $\\delta$ (mas)",
#                  "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                  "ga15-odd-even-com-wrms-combinederr.eps")


# # For R.A. component
# best_vals_RA, covar_RA = curve_fit(
#     error_inflation2, dRAc_err_mid, dRAc_wrms, p0=init_vals)
# sf_RA, nf_RA = best_vals_RA
# sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# print("For R.A. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_RA, sf_RA_err, nf_RA, nf_RA_err))


# # For Dec. component
# best_vals_Dec, covar_Dec = curve_fit(
#     error_inflation2, dDec_err_mid, dDec_wrms, p0=init_vals)
# sf_Dec, nf_Dec = best_vals_Dec
# sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# print("For Dec. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err))


# Method #03) IERS TN 35/ ICRF2
# difference in numbers of session and observation
num_dif_ses = num_ses_com1 - num_ses_com2
# num_dif_ses_abs = np.fabs(num_dif_ses)
# print("Difference in number of session: [%d ~ %d]" %
#       (min(num_dif_ses_abs), max(num_dif_ses_abs)))

num_dif_obs = num_obs_com1 - num_obs_com2
# num_dif_obs_abs = np.fabs(num_dif_obs)
# print("Difference in number of observation: [%d ~ %d]" %
#       (min(num_dif_obs_abs), max(num_dif_obs_abs)))


# # calculate the minimum number of sessions a source was observed/ observations
# num_min_ses = np.where(num_dif_ses <= 0, num_ses_com1, num_ses_com2)
# num_min_obs = np.where(num_dif_obs <= 0, num_obs_com1, num_obs_com2)

# Sort the data according to the number of sessions/onservations
# ind = np.argsort(num_min_ses)
ind = np.argsort(num_ses_mean)
# ind = np.argsort(num_min_obs)
# ind = np.argsort(num_obs_mean)

# num_ses_sort = np.take(num_min_ses, ind)
# num_obs_sort = np.take(num_min_obs, ind)
num_ses_sort = np.take(num_ses_mean, ind)
num_obs_sort = np.take(num_obs_mean, ind)
dRAc_sort = np.take(dRAc, ind)
dDec_sort = np.take(dDec, ind)
dRAc_err_sort = np.take(dRAc_err, ind)
dDec_err_sort = np.take(dDec_err, ind)

# Calculate the positional offset scatter
# dRAc_wrms, dRAc_err_med, ses_min_RA = pos_offset_wrms_calc2(
#     num_ses_sort, dRAc_sort, dRAc_err_sort, interv_size=50)
# dDec_wrms, dDec_err_med, ses_min_Dec = pos_offset_wrms_calc2(
#     num_ses_sort, dDec_sort, dDec_err_sort, interv_size=50)

# dRAc_wrms, dRAc_err_med, obs_min_RA = pos_offset_wrms_calc2(
#     num_obs_sort, dRAc_sort, dRAc_err_sort, interv_size=50)
# dDec_wrms, dDec_err_med, obs_min_Dec = pos_offset_wrms_calc2(
#     num_obs_sort, dDec_sort, dDec_err_sort, interv_size=50)


# observation-sorted
# comparison_plot3_1(obs_min_RA, dRAc_wrms, dRAc_err_med,
#                    "$N_{observation}$",
#                    "WRMS in $\\alpha\\,\\cos\\delta$ (mas)",
#                    "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                    "ga15-odd-even-com-wrms-combinederr-sortobs-RA.eps")
# comparison_plot3_1(obs_min_Dec, dDec_wrms, dDec_err_med,
#                    "$N_{observation}$",
#                    "WRMS in $\\delta$(mas)",
#                    "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                    "ga15-odd-even-com-wrms-combinederr-sortobs-Dec.eps")

# # For R.A. component
# best_vals_RA, covar_RA = curve_fit(
#     error_inflation2, dRAc_err_med, dRAc_wrms, p0=init_vals)
# sf_RA, nf_RA = best_vals_RA
# sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# print("For R.A. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_RA, sf_RA_err, nf_RA, nf_RA_err))

# # For Dec. component
# best_vals_Dec, covar_Dec = curve_fit(
#     error_inflation2, dDec_err_med, dDec_wrms, p0=init_vals)
# sf_Dec, nf_Dec = best_vals_Dec
# sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# print("For Dec. component:\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n" %
#       (sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err))


# Applied condition on number of session
dRAc_wrms, dRAc_err_med, ses_min_RA = pos_offset_wrms_calc3(
    num_ses_sort, dRAc_sort, dRAc_err_sort, interv_size=50)
dDec_wrms, dDec_err_med, ses_min_Dec = pos_offset_wrms_calc3(
    num_ses_sort, dDec_sort, dDec_err_sort, interv_size=50)

# # use a limit on N_ses
min_ses = 100
con = (ses_min_RA > min_ses)
# con = (ses_min_RA >= 10) & (ses_min_RA <= 20)
dRAc_err_med_s = dRAc_err_med[con]
dRAc_wrms_s = dRAc_wrms[con]
dDec_err_med_s = dDec_err_med[con]
dDec_wrms_s = dDec_wrms[con]

init_vals = [1.6, 0.2]
best_vals_RA, covar_RA = curve_fit(
    error_inflation2, dRAc_err_med_s, dRAc_wrms_s, p0=init_vals)
sf_RA, nf_RA = best_vals_RA
sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# post-fit residual(O -C)
res_RA = dRAc_wrms_s - error_inflation2(dRAc_err_med_s, sf_RA, nf_RA)
chi2_RA = np.dot(res_RA, res_RA) * 1.e6
red_chi2_RA = chi2_RA / (dRAc_err_med_s.size - 2)

print("# For R.A. component (N_ses >= %d):\n"
      "# scaling factor: %.2f +/- %.2f\n"
      "# noise floor: %.3f +/- %.3f mas\n"
      "# data points: %d\n"
      "# variables: 2\n"
      "# chi-square: %.2f (uas^2)\n"
      "# reduced chi-square: %.2f (uas^2)\n" %
      (min_ses, sf_RA, sf_RA_err, nf_RA, nf_RA_err,
       dRAc_err_med_s.size, chi2_RA, red_chi2_RA))


# For Dec. component
init_vals = [1.6, 0.2]
best_vals_Dec, covar_Dec = curve_fit(
    error_inflation2, dDec_err_med_s, dDec_wrms_s, p0=init_vals)
sf_Dec, nf_Dec = best_vals_Dec
sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# post-fit residual(O -C)
res_Dec = dDec_wrms_s - error_inflation2(dDec_err_med_s, sf_Dec, nf_Dec/1.e3)
chi2_Dec = np.dot(res_Dec, res_Dec) * 1.e6
red_chi2_Dec = chi2_Dec / (dDec_err_med_s.size - 2)
print("For Dec. component (N_ses >= %d):\n"
      "scaling factor: %.2f +/- %.2f\n"
      "noise floor: %.3f +/- %.3f mas\n"
      "# data points: %d\n"
      "# variables: 2\n"
      "# chi-square: %.2f (uas^2)\n"
      "# reduced chi-square: %.2f (uas^2)\n" %
      (min_ses, sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err,
       dDec_err_med_s.size, chi2_Dec, red_chi2_Dec))


# Plot
comparison_plot3_1(ses_min_RA, dRAc_wrms, dRAc_err_med,
                   "$N_{session}$",
                   "WRMS in $\\alpha\\,\\cos\\delta$ (mas)",
                   "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
                   # "ga15-odd-even-com-wrms-combinederr-sortses-RA.eps",
                   "ga15-odd-even-com-wrms-combinederr-sortses-RA-log.eps",
                   s=sf_RA, f=nf_RA)
comparison_plot3_1(ses_min_Dec, dDec_wrms, dDec_err_med,
                   "$N_{session}$",
                   "WRMS in $\\delta$(mas)",
                   "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
                   # "ga15-odd-even-com-wrms-combinederr-sortses-Dec.eps",
                   "ga15-odd-even-com-wrms-combinederr-sortses-Dec-log.eps",
                   s=sf_Dec, f=nf_Dec)


# # Applied condition on number of session
# dRAc_wrms, dRAc_err_med, obs_min_RA = pos_offset_wrms_calc3(
#     num_obs_sort, dRAc_sort, dRAc_err_sort, interv_size=50)
# dDec_wrms, dDec_err_med, obs_min_Dec = pos_offset_wrms_calc3(
#     num_obs_sort, dDec_sort, dDec_err_sort, interv_size=50)

# # use a limit on N_obs
# min_obs = 1000
# con = (obs_min_RA > min_obs)
# # con = (obs_min_RA >= 10) & (obs_min_RA <= 20)
# dRAc_err_med_s = dRAc_err_med[con]
# dRAc_wrms_s = dRAc_wrms[con]
# dDec_err_med_s = dDec_err_med[con]
# dDec_wrms_s = dDec_wrms[con]

# init_vals = [1.6, 0.0]
# best_vals_RA, covar_RA = curve_fit(
#     error_inflation2, dRAc_err_med_s, dRAc_wrms_s, p0=init_vals)
# sf_RA, nf_RA = best_vals_RA
# sf_RA_err, nf_RA_err = np.sqrt(np.diag(covar_RA))
# # post-fit residual(O -C)
# res_RA = dRAc_wrms_s - error_inflation2(dRAc_err_med_s, sf_RA, nf_RA)
# chi2_RA = np.dot(res_RA, res_RA) * 1.e6
# red_chi2_RA = chi2_RA / (dRAc_err_med_s.size - 2)

# print("# For R.A. component (N_obs >= %d):\n"
#       "# scaling factor: %.2f +/- %.2f\n"
#       "# noise floor: %.3f +/- %.3f mas\n"
#       "# data points: %d\n"
#       "# variables: 2\n"
#       "# chi-square: %.2f (uas^2)\n"
#       "# reduced chi-square: %.2f (uas^2)\n" %
#       (min_obs, sf_RA, sf_RA_err, nf_RA, nf_RA_err,
#        dRAc_err_med_s.size, chi2_RA, red_chi2_RA))

# # For Dec. component
# init_vals = [1.6, 1.]
# best_vals_Dec, covar_Dec = curve_fit(
#     error_inflation2, dDec_err_med_s, dDec_wrms_s, p0=init_vals)
# sf_Dec, nf_Dec = best_vals_Dec
# sf_Dec_err, nf_Dec_err = np.sqrt(np.diag(covar_Dec))
# # post-fit residual(O -C)
# res_Dec = dDec_wrms_s - error_inflation2(dDec_err_med_s, sf_Dec, nf_Dec/1.e3)
# chi2_Dec = np.dot(res_Dec, res_Dec) * 1.e6
# red_chi2_Dec = chi2_Dec / (dDec_err_med_s.size - 2)
# print("For Dec. component (N_obs >= %d):\n"
#       "scaling factor: %.2f +/- %.2f\n"
#       "noise floor: %.3f +/- %.3f mas\n"
#       "# data points: %d\n"
#       "# variables: 2\n"
#       "# chi-square: %.2f (uas^2)\n"
#       "# reduced chi-square: %.2f (uas^2)\n" %
#       (min_obs, sf_Dec, sf_Dec_err, nf_Dec, nf_Dec_err,
#        dDec_err_med_s.size, chi2_Dec, red_chi2_Dec))
"""


# # Plot
# comparison_plot3_1(obs_min_RA, dRAc_wrms, dRAc_err_med,
#                    "$N_{observation}$",
#                    "WRMS in $\\alpha\\,\\cos\\delta$ (mas)",
#                    "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                    "ga15-odd-even-com-wrms-combinederr-sortobs-RA.eps",
#                    # "ga15-odd-even-com-wrms-combinederr-sortobs-RA-log.eps",
#                    s=sf_RA, f=nf_RA)
# comparison_plot3_1(obs_min_Dec, dDec_wrms, dDec_err_med,
#                    "$N_{observation}$",
#                    "WRMS in $\\delta$(mas)",
#                    "/Users/Neo/Astronomy/Works/201711_GDR2_ICRF3/plots/"
#                    "ga15-odd-even-com-wrms-combinederr-sortobs-Dec.eps",
#                    # "ga15-odd-even-com-wrms-combinederr-sortobs-Dec-log.eps",
#                    s=sf_Dec, f=nf_Dec)
# --------------------------------- END --------------------------------
